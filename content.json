{"meta":{"title":"夜慕 | Blog","subtitle":null,"description":"一个前端小人物的成长记录","author":"yemu","url":"https://witcheryoung.github.io"},"pages":[{"title":"标签","date":"2019-01-05T14:52:35.000Z","updated":"2019-01-16T11:16:58.606Z","comments":true,"path":"tags/index.html","permalink":"https://witcheryoung.github.io/tags/index.html","excerpt":"","text":"&lt;!– 表头 条目一 条目二 项目 项目一 项目二 –&gt;"},{"title":"分类","date":"2019-01-05T14:53:14.000Z","updated":"2019-01-06T05:37:13.179Z","comments":true,"path":"categories/index.html","permalink":"https://witcheryoung.github.io/categories/index.html","excerpt":"","text":""},{"title":"关于我","date":"2019-01-05T14:53:14.000Z","updated":"2019-01-06T09:40:52.444Z","comments":true,"path":"about/index.html","permalink":"https://witcheryoung.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"趣事 —— 由一道面试题引发的思考","slug":"Thinking_Question","date":"2019-01-16T11:19:00.000Z","updated":"2019-01-18T14:18:53.376Z","comments":true,"path":"2019/01/16/Thinking_Question/","link":"","permalink":"https://witcheryoung.github.io/2019/01/16/Thinking_Question/","excerpt":"","text":"今天逛知乎的时候, 偶然间看到了一个问题, 说的是面试的事——&gt; 传送门 问题的描述是这样的 提问者面试一个5年的前端，却连原型链也搞不清楚，满口都是Vue，React之类的实现。提问者提了一个问题，输入m.n参数，获取一个m长度的都是n的数组，不能用循环，面试者不会写。 那么看到这道题时，我觉得也不难，也尝试了一下，但是结果还是不尽人意这是我刚开始的思路1234567function createArray(m, n) &#123; var arr = new Array(m); arr = arr.map(function(item, index, array) &#123; array[index] = n; &#125;) return arr&#125; 123var arr1 = createArray(2, 1);console.log(arr1);// [ &lt;2 empty items&gt; ] 很可惜它并没有打印我预想的结果 debugger逐步执行的时候，我发现数组的map()方法并没有进入执行—&gt; 原因 &nbsp; map()等数组方法, 在参照数组为空数组时, 调用的回调函数是不会生效的, 当然如果素组元素&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 是空字符串时是完全没有问题的。 那么不能使用循环，那么递归是一种不错的实现方式 仅仅使用函数递归实现，(arr.length == m) 数组长度等于m参数作为递归结束的条件 12345678910111213function createArray(m, n, arr) &#123; if(arr.length == m) &#123; return arr; &#125;else &#123; arr.push(n); return arguments.callee(m, n, arr); &#125;&#125;var arr1 = createArray(2, 1, []);console.log(arr1); // [ 1, 1 ]var arr2 = createArray(3, 2, []);console.log(arr2); // [ 2, 2, 2 ] 本质上还是使用递归实现，只是在放进了一个函数中，也就是闭包。 第一种方式 返回一个对象，相当于实现了私有方法仅有创建了createArray的闭包才可调用； 第二种方式 返回的是一个函数，那么arr1就相当于create函数，只是换了一个名字。 12345678910111213141516function createArray(m, n) &#123; var arr = new Array(); return &#123; create: function () &#123; if (arr.length == m) &#123; return arr; &#125; else &#123; arr.push(n); return arguments.callee(); &#125; &#125; &#125;&#125;var arr1 = createArray(2, 1);console.log(arr1.create()); 1234567891011121314function createArray(m, n) &#123; var arr = new Array(); function create() &#123; if(arr.length == m) &#123; return arr; &#125;else &#123; arr.push(n); return create() &#125; &#125; return create;&#125;var arr1 = createArray(2, 1);console.log(arr1()); 学无止境，肯定还有另外的方法，明白其原理之后继续记录吧。1234// 至于闭包，个人感觉与强类型语言的类( 比如C++，Java等 )有比较大的相似之处// 那就整理整理单独讲讲吧// ( 感觉强类型语言的条条框框很有限制感，所以前来学习JavaScript啦 )// 其实是并没有认真学的缘故叭 (-_-)","categories":[],"tags":[{"name":"思考","slug":"思考","permalink":"https://witcheryoung.github.io/tags/思考/"}]},{"title":"参会日记 —— 蘑菇街 D-DAY 技术沙龙 简述","slug":"MOGU_2019_D-DAY","date":"2019-01-12T09:50:00.000Z","updated":"2019-01-12T12:48:00.411Z","comments":true,"path":"2019/01/12/MOGU_2019_D-DAY/","link":"","permalink":"https://witcheryoung.github.io/2019/01/12/MOGU_2019_D-DAY/","excerpt":"","text":"本次蘑菇街 D-DAY 技术沙龙前端专场分为了4各部分 让前端解放双手——ui2code Aides Vue项目脚手架 一套代码多端实现-vx设计 小程序 SDK 开发集成实践可惜的是今天分享会中讲到所有工具暂时未开源 首先讲到的是ui2code工具通常前端的开发流程是这样的 拿到ui设计图 构思实现ui设计图 实现ui demo 模块开发及业务逻辑实现 前后端联调 测试上线 如果页面繁多,在写html+css时将会花更多的时间, 从而导致项目开发效率降低, 在这个背景下产生了ui2code工具, 该工具可上传sketch文件或psd文件来动态生成flex布局的html+css代码, 开发复查便可直接使用, 极大地节省开发时间。这样的工具可以让前端工程师更加注重业务层面开发。 Aides Vue项目脚手架Aides Vue脚手架工具是基于Vue创建的, Aides将搭建脚手架的重复工作封装起来, 让开发可以专注业务逻辑。 该脚手架工具有loader实现的功能，plugin实现的功能和其他的一些环境监测组件发布检测等等。 一套代码多端实现-vx设计复用H5端vue代码，转化为小程序代码 vue2vx转化工具：代码语法转化 vx基础库：抹平环境差异 vx打包工具：打出小程序sdk包页面可视化搭建平台基础库＋转化工具+页面搭建平台+打包管理机制 小程序 SDK 开发集成实践当在开发过程中遇到 业务复杂度高 代码复用能力弱 版本管理压力大 的问题时讲师提到了3点来解决这些问题 拆分小程序 SDK工程结构与小程序相同， 以SDK维度进行开发降低SDK以外代码干扰 高度可复用 通过npm托管SDK标准化版本号管理与框架选型无关 集成发布平台 以SDK代替分支管理自动化脚本完成集成发布 个人总结本次分享会的 关键词 高效随着前端技术的发展，目前三大框架(React，AngularJS，Vue)已经占据了前端开发的主流。在模块化，组件化的过程中仍然会遇到代码冗余耦合度高的问题，本次D-DAY中所讲到的ui2code是高效开发的一种体现, 加快UI设计图的实现步骤，而将小程序拆分成SDK提供了另一种模块化的思路, 来达到代码复用的目的虽然目前我对 webpack 还很生疏，也不能完全明白此次分享会的一些实现，但是这种模块化的思想对我在今后的开发肯定有所帮助","categories":[],"tags":[{"name":"参会日记","slug":"参会日记","permalink":"https://witcheryoung.github.io/tags/参会日记/"}]},{"title":"博客搭建想法","slug":"hello-world","date":"2019-01-03T13:54:41.000Z","updated":"2019-01-12T09:45:21.654Z","comments":true,"path":"2019/01/03/hello-world/","link":"","permalink":"https://witcheryoung.github.io/2019/01/03/hello-world/","excerpt":"","text":"搭建这个博客是我很早以前的想法但是由于先前一直在考虑要不要自己搭一个全栈的博客而迟迟没有动手, 最后发现hexo搭建是如此方便, 学习了一下之后做了值么一个博客demo。主要是向通过这个方式来让自己能够定时的做一个总结, 记录自己的学习过程。同时也希望在交流中成长。","categories":[],"tags":[]}]}